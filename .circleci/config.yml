version: 2.1

orbs:
   win: circleci/windows@1.0.0
   android: circleci/android@1.0

workflows:
  test:
    jobs:
      - build-linux
      - test-linux:
          name: Java 8 - Linux - OpenJDK
          docker-image: cimg/openjdk:8.0
          requires:
            - build-linux
      - test-linux:
          name: Java 11 - Linux - OpenJDK
          docker-image: cimg/openjdk:11.0
          requires:
            - build-linux
      - test-linux:
          name: Java 17 - Linux - OpenJDK
          docker-image: cimg/openjdk:17.0
          with-coverage: true
          requires:
            - build-linux
      - test-windows:
          name: Java 11 - Windows - OpenJDK
          openjdk-version: 11.0.2.01
          requires:
            - build-linux
      - test-windows:
          name: Java 17 - Windows - OpenJDK
          openjdk-version: 17.0.1
      - build-test-android:
          name: Android
          requires:
            - build-linux

jobs:
  build-linux:
    docker:
      - image: cimg/openjdk:8.0
    steps:
      - checkout
      - run: cp gradle.properties.example gradle.properties
      - run: java -version
      - run: ./gradlew dependencies
      - run: ./gradlew jar
      - run: ./gradlew javadoc
      - run: ./gradlew checkstyleMain
      - persist_to_workspace:
          root: build
          paths:
            - classes

  test-linux:
    parameters:
      docker-image:
        type: string
      with-coverage:
        type: boolean
        default: false
    docker:
      - image: <<parameters.docker-image>>
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run: java -version
      - run: ./gradlew test
      - when:
          condition: <<parameters.with-coverage>>
          steps:
            - run:
                name: Generate test coverage report
                command: |
                  ./gradlew jacocoTestReport
                  mkdir -p coverage/
                  cp -r build/reports/jacoco/test/* ./coverage
            # Test coverage enforcement is temporarily disabled because the test code that was
            # moved from java-server-sdk did not have a 100% coverage requirement.
            # - run:
            #     name: Enforce test coverage
            #     command: ./gradlew jacocoTestCoverageVerification
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/;
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
      - when:
          condition: <<parameters.with-coverage>>
          steps:
            - store_artifacts:
                path: coverage

  test-windows:
    parameters:
      openjdk-version:
        type: string
    executor:
      name: win/vs2019
      shell: powershell.exe
    steps:
      - checkout
      - run:
          name: uninstall previous openjdk
          command: choco uninstall openjdk
      - run:
          name: install OpenJDK
          command: choco install openjdk --version <<parameters.openjdk-version>>
      - attach_workspace:
          at: build
      - run:
          name: run tests
          command: |
            .\gradlew.bat --no-daemon test  # must use --no-daemon because CircleCI in Windows will hang if there's a daemon running
      - run:
          name: save test results
          command: |
            mkdir .\junit
            cp build/test-results/test/*.xml junit
      - store_test_results:
          path: .\junit
      - store_artifacts:
          path: .\junit

  build-test-android:
    executor:
      name: android/android-machine
      resource-class: large

    steps:
      - checkout

      # What we want to do here is somewhat unusual: we want Android to run all of our tests from
      # src/test/java, but run them in the Android emulator (to prove that we're only using Java
      # APIs that our minimum Android API version supports). Normally, only tests in
      # src/androidTest/java would be run that way. Also, Android needs a different JUnit test
      # runner annotation on all of the test classes. So we can't just run the test code as-is.
      #
      # This step copies all the code from src/test/java into src/androidTest/java, except for the
      # base class BaseTest.java, which is already defined in src/androidTest/java to provide the
      # necessary test runner annotation.
      - run:
          name: Copy tests
          command: rsync -r ./src/test/java/ ./src/androidTest/java/ --exclude='BaseTest.java'

      - android/start-emulator-and-run-tests:
          system-image: system-images;android-21;default;x86
          max-tries: 1
          post-emulator-launch-assemble-command: ./gradlew -b build-android.gradle :assembleAndroidTest
          test-command: ./gradlew -b build-android.gradle :connectedAndroidTest

      - store_test_results:
          path: ./build/outputs/androidTest-results

      - store_test_results:
          path: ./build/reports/androidTests/connected
